using System;
using System.Collections.Generic;
using MoreSlugcats;
using RWCustom;
using UnityEngine;

public static class StaticWorld
{
	public static CreatureTemplate[] creatureTemplates;

	public static CreatureTemplate[] preBakedPathingCreatures;

	public static CreatureTemplate[] quantifiedCreatures;

	public static int numberOfRoomAttractions;

	static StaticWorld()
	{
	}

	public static void InitCustomTemplates()
	{
		Custom.LogImportant("Init Custom Templates");
	}

	public static void InitStaticWorld()
	{
		numberOfRoomAttractions = ExtEnum<AbstractRoom.CreatureRoomAttraction>.values.Count;
		List<CreatureTemplate> list = new List<CreatureTemplate>();
		List<TileTypeResistance> list2 = new List<TileTypeResistance>();
		List<TileConnectionResistance> list3 = new List<TileConnectionResistance>();
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 2.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 20f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 20f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 25f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
		CreatureTemplate creatureTemplate = new CreatureTemplate(CreatureTemplate.Type.StandardGroundCreature, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		list.Add(creatureTemplate);
		creatureTemplate.doPreBakedPathing = true;
		creatureTemplate.virtualCreature = true;
		creatureTemplate.canSwim = true;
		creatureTemplate.waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1.2f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 3000f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToClimb, 6000f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 4000f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 0.9f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.Slugcat, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].baseDamageResistance = 1f;
		list[list.Count - 1].baseStunResistance = 1f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].grasps = 2;
		list[list.Count - 1].offScreenSpeed = 0.1f;
		list[list.Count - 1].bodySize = 1f;
		list[list.Count - 1].shortcutSegments = 2;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate;
		list[list.Count - 1].meatPoints = 3;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.Amphibious;
		list[list.Count - 1].waterPathingResistance = 2f;
		list[list.Count - 1].canSwim = true;
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DoubleReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 20f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 20f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 25f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.LizardTurn, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.LizardTemplate, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		CreatureTemplate creatureTemplate2 = list[list.Count - 1];
		creatureTemplate2.offScreenSpeed = 0.3f;
		creatureTemplate2.grasps = 1;
		creatureTemplate2.virtualCreature = true;
		creatureTemplate2.abstractedLaziness = 50;
		creatureTemplate2.AI = true;
		creatureTemplate2.requireAImap = true;
		creatureTemplate2.bodySize = 2f;
		creatureTemplate2.stowFoodInDen = true;
		creatureTemplate2.shortcutSegments = 3;
		creatureTemplate2.communityID = CreatureCommunities.CommunityID.Lizards;
		creatureTemplate2.communityInfluence = 1f;
		creatureTemplate2.waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		creatureTemplate2.canSwim = true;
		creatureTemplate2.socialMemory = true;
		creatureTemplate2.usesNPCTransportation = true;
		creatureTemplate2.interestInOtherAncestorsCatches = 1.25f;
		creatureTemplate2.interestInOtherCreaturesCatches = 1.1f;
		list2.Clear();
		list3.Clear();
		CreatureTemplate creatureTemplate3 = LizardBreeds.BreedTemplate(CreatureTemplate.Type.PinkLizard, creatureTemplate2, null, null, null);
		list.Add(creatureTemplate3);
		CreatureTemplate creatureTemplate4 = LizardBreeds.BreedTemplate(CreatureTemplate.Type.GreenLizard, creatureTemplate2, null, null, null);
		list.Add(creatureTemplate4);
		CreatureTemplate creatureTemplate5 = LizardBreeds.BreedTemplate(CreatureTemplate.Type.BlueLizard, creatureTemplate2, null, null, null);
		list.Add(creatureTemplate5);
		list.Add(LizardBreeds.BreedTemplate(CreatureTemplate.Type.YellowLizard, creatureTemplate2, creatureTemplate3, null, null));
		CreatureTemplate creatureTemplate6 = LizardBreeds.BreedTemplate(CreatureTemplate.Type.WhiteLizard, creatureTemplate2, creatureTemplate3, null, null);
		list.Add(creatureTemplate6);
		list.Add(LizardBreeds.BreedTemplate(CreatureTemplate.Type.RedLizard, creatureTemplate2, creatureTemplate3, null, null));
		list.Add(LizardBreeds.BreedTemplate(CreatureTemplate.Type.BlackLizard, creatureTemplate2, creatureTemplate3, null, null));
		CreatureTemplate creatureTemplate7 = LizardBreeds.BreedTemplate(CreatureTemplate.Type.Salamander, creatureTemplate2, creatureTemplate3, null, null);
		list.Add(creatureTemplate7);
		if (ModManager.MSC)
		{
			list.Add(LizardBreeds.BreedTemplate(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, creatureTemplate2, null, null, creatureTemplate4));
			list[list.Count - 1].BlizzardWanderer = true;
			list[list.Count - 1].BlizzardAdapted = true;
			list.Add(LizardBreeds.BreedTemplate(MoreSlugcatsEnums.CreatureTemplateType.EelLizard, creatureTemplate2, creatureTemplate7));
			list.Add(LizardBreeds.BreedTemplate(MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, creatureTemplate2, creatureTemplate3, creatureTemplate5, creatureTemplate4));
			list[list.Count - 1].BlizzardWanderer = true;
			list.Add(LizardBreeds.BreedTemplate(MoreSlugcatsEnums.CreatureTemplateType.TrainLizard, creatureTemplate2, creatureTemplate3, null, null));
		}
		CreatureTemplate creatureTemplate8 = LizardBreeds.BreedTemplate(CreatureTemplate.Type.CyanLizard, creatureTemplate2, creatureTemplate3, creatureTemplate5, null);
		list.Add(creatureTemplate8);
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 10f, PathCost.Legality.Allowed));
		CreatureTemplate creatureTemplate9 = new CreatureTemplate(CreatureTemplate.Type.Fly, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 0f));
		list.Add(creatureTemplate9);
		list[list.Count - 1].baseDamageResistance = 0.15f;
		list[list.Count - 1].baseStunResistance = 0.2f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].abstractedLaziness = 100;
		list[list.Count - 1].AI = false;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canFly = true;
		list[list.Count - 1].doPreBakedPathing = true;
		list[list.Count - 1].offScreenSpeed = 0.1f;
		list[list.Count - 1].bodySize = 0.1f;
		list[list.Count - 1].quantified = true;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].smallCreature = true;
		list[list.Count - 1].visualRadius = 450f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.None;
		list[list.Count - 1].countsAsAKill = 0;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirOnly;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].pickupAction = "Burrow/Attach";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 10f, PathCost.Legality.Allowed));
		CreatureTemplate creatureTemplate10 = new CreatureTemplate(CreatureTemplate.Type.Leech, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
		list.Add(creatureTemplate10);
		list[list.Count - 1].baseDamageResistance = 0.1f;
		list[list.Count - 1].baseStunResistance = 0.1f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].abstractedLaziness = 100;
		list[list.Count - 1].AI = false;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canSwim = true;
		list[list.Count - 1].doPreBakedPathing = true;
		list[list.Count - 1].offScreenSpeed = 0.1f;
		list[list.Count - 1].bodySize = 0.1f;
		list[list.Count - 1].quantified = true;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].smallCreature = true;
		list[list.Count - 1].visualRadius = 400f;
		list[list.Count - 1].dangerousToPlayer = 0.05f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.None;
		list[list.Count - 1].countsAsAKill = 0;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.WaterOnly;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].pickupAction = "Attach";
		list[list.Count - 1].throwAction = "Release";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 10f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.SeaLeech, creatureTemplate10, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].baseDamageResistance = 0.2f;
		list[list.Count - 1].baseStunResistance = 0.2f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate10;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].bodySize = 0.15f;
		list[list.Count - 1].dangerousToPlayer = 0.07f;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].pickupAction = "Attach";
		list[list.Count - 1].throwAction = "Release";
		list2.Clear();
		list3.Clear();
		if (ModManager.MSC)
		{
			list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 50f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 50f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 10f, PathCost.Legality.Allowed));
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.JungleLeech, creatureTemplate10, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
			list[list.Count - 1].BlizzardWanderer = true;
			list[list.Count - 1].BlizzardAdapted = false;
			list[list.Count - 1].baseDamageResistance = 0.2f;
			list[list.Count - 1].baseStunResistance = 0.2f;
			list[list.Count - 1].instantDeathDamageLimit = 1f;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate10;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].bodySize = 0.05f;
			list[list.Count - 1].dangerousToPlayer = 0f;
			list[list.Count - 1].pickupAction = "Attach";
			list[list.Count - 1].throwAction = "Release";
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.Amphibious;
			list2.Clear();
			list3.Clear();
		}
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Ceiling, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 0.2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 20f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.6f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.CeilingSlope, 1.6f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		CreatureTemplate creatureTemplate11 = new CreatureTemplate(CreatureTemplate.Type.Snail, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 0.5f));
		list.Add(creatureTemplate11);
		list[list.Count - 1].baseDamageResistance = 0.4f;
		list[list.Count - 1].baseStunResistance = 0.8f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].doPreBakedPathing = true;
		list[list.Count - 1].grasps = 0;
		list[list.Count - 1].offScreenSpeed = 0.05f;
		list[list.Count - 1].bodySize = 0.7f;
		list[list.Count - 1].shortcutSegments = 2;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].visualRadius = 300f;
		list[list.Count - 1].waterVision = 1f;
		list[list.Count - 1].throughSurfaceVision = 0.5f;
		list[list.Count - 1].countsAsAKill = 1;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.Amphibious;
		list[list.Count - 1].waterPathingResistance = 1f;
		list[list.Count - 1].communityInfluence = 0.25f;
		list[list.Count - 1].meatPoints = 1;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].throwAction = "Click";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OutsideRoom, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SkyHighway, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.Vulture, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].baseDamageResistance = 8.5f;
		list[list.Count - 1].baseStunResistance = 3.5f;
		list[list.Count - 1].abstractedLaziness = 10;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canSwim = false;
		list[list.Count - 1].canFly = true;
		list[list.Count - 1].doPreBakedPathing = true;
		list[list.Count - 1].offScreenSpeed = 0.8f;
		list[list.Count - 1].bodySize = 6f;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].shortcutSegments = 5;
		list[list.Count - 1].visualRadius = 7000f;
		list[list.Count - 1].movementBasedVision = 0.4f;
		list[list.Count - 1].waterVision = 0.8f;
		list[list.Count - 1].throughSurfaceVision = 0.8f;
		list[list.Count - 1].hibernateOffScreen = true;
		list[list.Count - 1].dangerousToPlayer = 0.7f;
		list[list.Count - 1].communityInfluence = 0.25f;
		list[list.Count - 1].socialMemory = true;
		list[list.Count - 1].meatPoints = 14;
		list[list.Count - 1].lungCapacity = 750f;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		CreatureTemplate creatureTemplate12 = list[list.Count - 1];
		list[list.Count - 1].interestInOtherAncestorsCatches = 0.25f;
		list[list.Count - 1].interestInOtherCreaturesCatches = 0.25f;
		list[list.Count - 1].forbidStandardShortcutEntry = true;
		list[list.Count - 1].jumpAction = "Fly";
		list[list.Count - 1].pickupAction = "Ensnare";
		list[list.Count - 1].throwAction = "Release";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OutsideRoom, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SkyHighway, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.KingVulture, creatureTemplate12, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].baseDamageResistance = 12.5f;
		list[list.Count - 1].baseStunResistance = 6.5f;
		list[list.Count - 1].abstractedLaziness = 10;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate12;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].offScreenSpeed = 0.8f;
		list[list.Count - 1].bodySize = 8.5f;
		list[list.Count - 1].visualRadius = 7000f;
		list[list.Count - 1].movementBasedVision = 0.4f;
		list[list.Count - 1].waterVision = 0.8f;
		list[list.Count - 1].throughSurfaceVision = 0.8f;
		list[list.Count - 1].dangerousToPlayer = 0.9f;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list[list.Count - 1].meatPoints = 16;
		list[list.Count - 1].lungCapacity = 750f;
		list[list.Count - 1].canFly = true;
		list[list.Count - 1].jumpAction = "Fly";
		list[list.Count - 1].pickupAction = "Ensnare";
		list[list.Count - 1].throwAction = "Harpoon";
		list2.Clear();
		list3.Clear();
		if (ModManager.MSC)
		{
			list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OutsideRoom, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SkyHighway, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SideHighway, 10f, PathCost.Legality.Allowed));
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
			list[list.Count - 1].BlizzardWanderer = true;
			list[list.Count - 1].BlizzardAdapted = true;
			list[list.Count - 1].baseDamageResistance = 20f;
			list[list.Count - 1].baseStunResistance = 5f;
			list[list.Count - 1].abstractedLaziness = 10;
			list[list.Count - 1].AI = true;
			list[list.Count - 1].requireAImap = true;
			list[list.Count - 1].canSwim = false;
			list[list.Count - 1].canFly = true;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate12;
			list[list.Count - 1].offScreenSpeed = 1.5f;
			list[list.Count - 1].bodySize = 8f;
			list[list.Count - 1].grasps = 1;
			list[list.Count - 1].stowFoodInDen = true;
			list[list.Count - 1].shortcutSegments = 5;
			list[list.Count - 1].visualRadius = 7000f;
			list[list.Count - 1].movementBasedVision = 0.4f;
			list[list.Count - 1].waterVision = 0.8f;
			list[list.Count - 1].throughSurfaceVision = 0.8f;
			list[list.Count - 1].hibernateOffScreen = true;
			list[list.Count - 1].dangerousToPlayer = 0.7f;
			list[list.Count - 1].meatPoints = 15;
			list[list.Count - 1].communityInfluence = 0.25f;
			list[list.Count - 1].socialMemory = true;
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
			list[list.Count - 1].jumpAction = "Fly";
			list[list.Count - 1].pickupAction = "Snip";
			list[list.Count - 1].throwAction = "Laser";
			list2.Clear();
			list3.Clear();
		}
		list.Add(new CreatureTemplate(CreatureTemplate.Type.GarbageWorm, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].offScreenSpeed = 0f;
		list[list.Count - 1].bodySize = 1f;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].visualRadius = 800f;
		list[list.Count - 1].saveCreature = false;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirOnly;
		list[list.Count - 1].baseDamageResistance = 1f;
		list[list.Count - 1].baseStunResistance = 1f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.GarbageWorms;
		list[list.Count - 1].communityInfluence = 1f;
		list[list.Count - 1].forbidStandardShortcutEntry = true;
		list[list.Count - 1].jumpAction = "Emotional State";
		list[list.Count - 1].pickupAction = "Grab";
		list[list.Count - 1].throwAction = "Release";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 2.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 20f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 20f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 25f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.LanternMouse, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.1f)));
		list[list.Count - 1].baseDamageResistance = 0.5f;
		list[list.Count - 1].baseStunResistance = 0.4f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].offScreenSpeed = 0.3f;
		list[list.Count - 1].abstractedLaziness = 50;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].bodySize = 0.7f;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].shortcutSegments = 2;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].visualRadius = 800f;
		list[list.Count - 1].communityInfluence = 1f;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list[list.Count - 1].meatPoints = 2;
		list[list.Count - 1].canSwim = true;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].jumpAction = "Sit/Sleep";
		list[list.Count - 1].pickupAction = "Hang";
		list[list.Count - 1].throwAction = "Squeak";
		list[list.Count - 1].usesNPCTransportation = true;
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.CicadaA, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 0f)));
		list[list.Count - 1].baseDamageResistance = 0.8f;
		list[list.Count - 1].baseStunResistance = 1f;
		list[list.Count - 1].abstractedLaziness = 100;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canFly = true;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].offScreenSpeed = 0.5f;
		list[list.Count - 1].bodySize = 0.6f;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate9;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].visualRadius = 1100f;
		list[list.Count - 1].movementBasedVision = 0.6f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.Cicadas;
		list[list.Count - 1].communityInfluence = 1f;
		list[list.Count - 1].socialMemory = true;
		list[list.Count - 1].lungCapacity = 180f;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirOnly;
		list[list.Count - 1].meatPoints = 3;
		list[list.Count - 1].usesNPCTransportation = true;
		list[list.Count - 1].jumpAction = "Bash";
		list[list.Count - 1].pickupAction = "Pick up Food";
		list[list.Count - 1].throwAction = "Discard";
		list2.Clear();
		list3.Clear();
		list.Add(new CreatureTemplate(CreatureTemplate.Type.CicadaB, list[list.Count - 1], list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 0f)));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Ceiling, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 0.2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 20f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.6f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.CeilingSlope, 1.6f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.Spider, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].baseDamageResistance = 0.1f;
		list[list.Count - 1].baseStunResistance = 0.1f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].abstractedLaziness = 100;
		list[list.Count - 1].AI = false;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate11;
		list[list.Count - 1].offScreenSpeed = 0.1f;
		list[list.Count - 1].bodySize = 0.1f;
		list[list.Count - 1].quantified = true;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].smallCreature = true;
		list[list.Count - 1].visualRadius = 600f;
		list[list.Count - 1].dangerousToPlayer = 0.1f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.None;
		list[list.Count - 1].countsAsAKill = 0;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.Amphibious;
		list[list.Count - 1].usesNPCTransportation = true;
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 10f, PathCost.Legality.Allowed));
		CreatureTemplate creatureTemplate13 = new CreatureTemplate(CreatureTemplate.Type.JetFish, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		list.Add(creatureTemplate13);
		list[list.Count - 1].baseDamageResistance = 0.95f;
		list[list.Count - 1].baseStunResistance = 0.9f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].abstractedLaziness = 100;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canSwim = true;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].offScreenSpeed = 2f;
		list[list.Count - 1].bodySize = 0.8f;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate10;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].visualRadius = 450f;
		list[list.Count - 1].waterVision = 1f;
		list[list.Count - 1].throughSurfaceVision = 0.65f;
		list[list.Count - 1].movementBasedVision = 0f;
		list[list.Count - 1].socialMemory = true;
		list[list.Count - 1].communityInfluence = 0.75f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.JetFish;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.WaterOnly;
		list[list.Count - 1].meatPoints = 4;
		list[list.Count - 1].jumpAction = "Water Jet";
		list[list.Count - 1].pickupAction = "Pick up Food";
		list[list.Count - 1].throwAction = "Discard";
		list[list.Count - 1].usesNPCTransportation = true;
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OutsideRoom, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SeaHighway, 100000f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.BigEel, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].baseDamageResistance = 1000f;
		list[list.Count - 1].baseStunResistance = 1000f;
		list[list.Count - 1].abstractedLaziness = 100;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canSwim = true;
		list[list.Count - 1].doPreBakedPathing = true;
		list[list.Count - 1].offScreenSpeed = 1f;
		list[list.Count - 1].bodySize = 100f;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].visualRadius = 1450f;
		list[list.Count - 1].waterVision = 1f;
		list[list.Count - 1].throughSurfaceVision = 0.65f;
		list[list.Count - 1].movementBasedVision = 0f;
		list[list.Count - 1].hibernateOffScreen = true;
		list[list.Count - 1].dangerousToPlayer = 0.8f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.None;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.WaterOnly;
		list[list.Count - 1].forbidStandardShortcutEntry = true;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].pickupAction = "Chomp";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OutsideRoom, (ModManager.MMF && MMF.cfgDeerBehavior.Value) ? 100f : 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SideHighway, 100000f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, (ModManager.MMF && MMF.cfgDeerBehavior.Value) ? 100f : 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, (ModManager.MMF && MMF.cfgDeerBehavior.Value) ? 1000f : 10f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.Deer, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].baseDamageResistance = 200f;
		list[list.Count - 1].baseStunResistance = 8f;
		list[list.Count - 1].abstractedLaziness = 100;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].doPreBakedPathing = true;
		list[list.Count - 1].offScreenSpeed = 1f;
		list[list.Count - 1].bodySize = 10f;
		list[list.Count - 1].grasps = 0;
		list[list.Count - 1].stowFoodInDen = false;
		list[list.Count - 1].visualRadius = 1450f;
		list[list.Count - 1].waterVision = 0.5f;
		list[list.Count - 1].throughSurfaceVision = 0.65f;
		list[list.Count - 1].movementBasedVision = 0f;
		list[list.Count - 1].hibernateOffScreen = true;
		list[list.Count - 1].communityInfluence = 0.85f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.Deer;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirOnly;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].forbidStandardShortcutEntry = true;
		list[list.Count - 1].jumpAction = "Bow";
		list[list.Count - 1].pickupAction = "Eat";
		list[list.Count - 1].throwAction = "Howl";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DoubleReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 25f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.TubeWorm, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].baseDamageResistance = 0.3f;
		list[list.Count - 1].baseStunResistance = 0.3f;
		list[list.Count - 1].instantDeathDamageLimit = 1.2f;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].offScreenSpeed = 0f;
		list[list.Count - 1].bodySize = 0.25f;
		list[list.Count - 1].grasps = 0;
		list[list.Count - 1].visualRadius = 100f;
		list[list.Count - 1].communityInfluence = 0.15f;
		list[list.Count - 1].countsAsAKill = 1;
		for (int i = 0; i < list.Count; i++)
		{
			if (list[i].type == CreatureTemplate.Type.GreenLizard)
			{
				list[list.Count - 1].preBakedPathingAncestor = list[i];
				break;
			}
		}
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirOnly;
		list[list.Count - 1].meatPoints = 1;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].usesNPCTransportation = true;
		list[list.Count - 1].jumpAction = "Use Both Tongues";
		list[list.Count - 1].pickupAction = "Use Rear Tongue";
		list[list.Count - 1].throwAction = "Use Front Tongue";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BigCreatureShortCutSqueeze, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		CreatureTemplate creatureTemplate14 = new CreatureTemplate(CreatureTemplate.Type.DaddyLongLegs, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
		list.Add(creatureTemplate14);
		list[list.Count - 1].baseDamageResistance = 200f;
		list[list.Count - 1].baseStunResistance = 200f;
		list[list.Count - 1].damageRestistances[(int)Creature.DamageType.Explosion, 0] = 0.03f;
		list[list.Count - 1].abstractedLaziness = 400;
		list[list.Count - 1].roamBetweenRoomsChance = 0.05f;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canFly = false;
		list[list.Count - 1].doPreBakedPathing = true;
		list[list.Count - 1].offScreenSpeed = 0.02f;
		list[list.Count - 1].bodySize = 5.5f;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].visualRadius = 0f;
		list[list.Count - 1].movementBasedVision = 0f;
		list[list.Count - 1].dangerousToPlayer = 0.85f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.None;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.Amphibious;
		list[list.Count - 1].meatPoints = 10;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].shortcutColor = Color.blue;
		list[list.Count - 1].shortcutSegments = 3;
		list[list.Count - 1].jumpAction = "Cannonball";
		list[list.Count - 1].pickupAction = "Consume";
		list[list.Count - 1].throwAction = "Release";
		list2.Clear();
		list3.Clear();
		list.Add(new CreatureTemplate(CreatureTemplate.Type.BrotherLongLegs, creatureTemplate14, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].baseDamageResistance = 100f;
		list[list.Count - 1].baseStunResistance = 2f;
		list[list.Count - 1].damageRestistances[(int)Creature.DamageType.Explosion, 0] = 0.03f;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate14;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].bodySize = 2.5f;
		list[list.Count - 1].offScreenSpeed = 0.1f;
		list[list.Count - 1].dangerousToPlayer = 0.75f;
		list[list.Count - 1].meatPoints = 5;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].shortcutColor = new Color(0.7f, 0.7f, 0.4f);
		list[list.Count - 1].shortcutSegments = 2;
		list[list.Count - 1].jumpAction = "Cannonball";
		list[list.Count - 1].pickupAction = "Consume";
		list[list.Count - 1].throwAction = "Release";
		if (ModManager.MSC)
		{
			list2.Clear();
			list3.Clear();
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.TerrorLongLegs, creatureTemplate14, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
			list[list.Count - 1].BlizzardWanderer = true;
			list[list.Count - 1].BlizzardAdapted = true;
			list[list.Count - 1].baseDamageResistance = 400f;
			list[list.Count - 1].baseStunResistance = 4f;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate14;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].bodySize = 3f;
			list[list.Count - 1].offScreenSpeed = 0.1f;
			list[list.Count - 1].dangerousToPlayer = 1f;
			list[list.Count - 1].meatPoints = 10;
			list[list.Count - 1].shortcutColor = new Color(0.3f, 0f, 1f);
			list[list.Count - 1].shortcutSegments = 4;
			list[list.Count - 1].jumpAction = "Cannonball";
			list[list.Count - 1].pickupAction = "Consume";
			list[list.Count - 1].throwAction = "Release";
		}
		if (ModManager.MSC)
		{
			list2.Clear();
			list3.Clear();
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.HunterDaddy, creatureTemplate14, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
			list[list.Count - 1].BlizzardWanderer = true;
			list[list.Count - 1].baseDamageResistance = 50f;
			list[list.Count - 1].baseStunResistance = 2f;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate14;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].bodySize = 2f;
			list[list.Count - 1].offScreenSpeed = 0.1f;
			list[list.Count - 1].dangerousToPlayer = 1f;
			list[list.Count - 1].meatPoints = 5;
			list[list.Count - 1].saveCreature = false;
			list[list.Count - 1].shortcutColor = new Color(0.57255f, 0.11373f, 0.22745f);
			list[list.Count - 1].shortcutSegments = 2;
			list[list.Count - 1].jumpAction = "Cannonball";
			list[list.Count - 1].pickupAction = "Consume";
			list[list.Count - 1].throwAction = "Release";
		}
		if (ModManager.MSC)
		{
			list2.Clear();
			list3.Clear();
			list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 100f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Ceiling, 100f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 100f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.Inspector, creatureTemplate14, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 1f)));
			list[list.Count - 1].baseDamageResistance = 1f;
			list[list.Count - 1].baseStunResistance = 5f;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate14;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].bodySize = 3.5f;
			list[list.Count - 1].offScreenSpeed = 0.1f;
			list[list.Count - 1].dangerousToPlayer = 0f;
			list[list.Count - 1].meatPoints = 1;
			list[list.Count - 1].visualRadius = 130f;
			list[list.Count - 1].jumpAction = "Emotional State";
			list[list.Count - 1].pickupAction = "Grab";
			list[list.Count - 1].throwAction = "Throw";
		}
		list2.Clear();
		list3.Clear();
		list.Add(new CreatureTemplate(CreatureTemplate.Type.TentaclePlant, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].baseDamageResistance = 2.5f;
		list[list.Count - 1].baseStunResistance = 0.8f;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = false;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].offScreenSpeed = 0f;
		list[list.Count - 1].bodySize = 2f;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].visualRadius = 400f;
		list[list.Count - 1].movementBasedVision = 1f;
		list[list.Count - 1].waterVision = 1f;
		list[list.Count - 1].throughSurfaceVision = 0f;
		list[list.Count - 1].dangerousToPlayer = 0.5f;
		list[list.Count - 1].communityInfluence = 0.1f;
		list[list.Count - 1].wormGrassImmune = true;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.Amphibious;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].pickupAction = "Snatch";
		list2.Clear();
		list3.Clear();
		list.Add(new CreatureTemplate(CreatureTemplate.Type.PoleMimic, list[list.Count - 1], list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].baseDamageResistance = 0.9f;
		list[list.Count - 1].baseStunResistance = 0.5f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].dangerousToPlayer = 0.5f;
		list[list.Count - 1].communityInfluence = 0.05f;
		list[list.Count - 1].countsAsAKill = 1;
		list[list.Count - 1].AI = false;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].wormGrassImmune = true;
		list[list.Count - 1].bodySize = 1.4f;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].jumpAction = "Stealth";
		list[list.Count - 1].pickupAction = "Grab";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OutsideRoom, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SideHighway, 100f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.MirosBird, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].baseDamageResistance = 7f;
		list[list.Count - 1].baseStunResistance = 2.75f;
		list[list.Count - 1].abstractedLaziness = 10;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canFly = false;
		list[list.Count - 1].doPreBakedPathing = true;
		list[list.Count - 1].offScreenSpeed = 1.5f;
		list[list.Count - 1].bodySize = 7f;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].visualRadius = 1800f;
		list[list.Count - 1].movementBasedVision = 0.1f;
		list[list.Count - 1].hibernateOffScreen = true;
		list[list.Count - 1].dangerousToPlayer = 0.6f;
		list[list.Count - 1].communityInfluence = 0.1f;
		list[list.Count - 1].meatPoints = 12;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list[list.Count - 1].forbidStandardShortcutEntry = true;
		list[list.Count - 1].interestInOtherAncestorsCatches = 2f;
		list[list.Count - 1].interestInOtherCreaturesCatches = 0.5f;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].canFly = true;
		list[list.Count - 1].jumpAction = "Sprint";
		list[list.Count - 1].pickupAction = "Snip";
		list[list.Count - 1].throwAction = "Release";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Unallowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.TempleGuard, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 1f)));
		list[list.Count - 1].baseDamageResistance = 10000000f;
		list[list.Count - 1].baseStunResistance = 10000000f;
		list[list.Count - 1].abstractedLaziness = 20000;
		list[list.Count - 1].roamInRoomChance = -1f;
		list[list.Count - 1].roamBetweenRoomsChance = -1f;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canSwim = false;
		list[list.Count - 1].canFly = true;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate12;
		list[list.Count - 1].offScreenSpeed = 0.8f;
		list[list.Count - 1].bodySize = 7f;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].shortcutSegments = 5;
		list[list.Count - 1].visualRadius = 7000f;
		list[list.Count - 1].movementBasedVision = 0.4f;
		list[list.Count - 1].waterVision = 0.8f;
		list[list.Count - 1].throughSurfaceVision = 0.8f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.None;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list[list.Count - 1].forbidStandardShortcutEntry = true;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].pickupAction = "Telekinesis";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Ceiling, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DoubleReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 25f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToClimb, 5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 1.1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 1.1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.CeilingSlope, 2f, PathCost.Legality.Allowed));
		CreatureTemplate creatureTemplate15 = new CreatureTemplate(CreatureTemplate.Type.Centipede, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
		list.Add(creatureTemplate15);
		list[list.Count - 1].baseDamageResistance = 0.9f;
		list[list.Count - 1].baseStunResistance = 0.6f;
		list[list.Count - 1].quickDeath = false;
		list[list.Count - 1].offScreenSpeed = 0.3f;
		list[list.Count - 1].grasps = 2;
		list[list.Count - 1].abstractedLaziness = 150;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].bodySize = 1f;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].shortcutSegments = 3;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate5;
		list[list.Count - 1].doubleReachUpConnectionParams = creatureTemplate5.doubleReachUpConnectionParams;
		list[list.Count - 1].visualRadius = 900f;
		list[list.Count - 1].waterVision = 0.4f;
		list[list.Count - 1].throughSurfaceVision = 0.85f;
		list[list.Count - 1].movementBasedVision = 0.95f;
		list[list.Count - 1].dangerousToPlayer = 0.3f;
		list[list.Count - 1].communityInfluence = 0.25f;
		list[list.Count - 1].meatPoints = 1;
		list[list.Count - 1].lungCapacity = 900f;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list[list.Count - 1].canSwim = true;
		list[list.Count - 1].damageRestistances[(int)Creature.DamageType.Electric, 0] = 102f;
		list[list.Count - 1].damageRestistances[(int)Creature.DamageType.Electric, 1] = 102f;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].stowFoodInDen = false;
		list[list.Count - 1].usesNPCTransportation = true;
		list[list.Count - 1].jumpAction = "Swap Heads";
		list[list.Count - 1].pickupAction = "Grab/Shock";
		list[list.Count - 1].throwAction = "Release";
		list2.Clear();
		list3.Clear();
		list.Add(new CreatureTemplate(CreatureTemplate.Type.RedCentipede, creatureTemplate15, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].baseDamageResistance = 1f;
		list[list.Count - 1].visualRadius = 1100f;
		list[list.Count - 1].dangerousToPlayer = 0.6f;
		list[list.Count - 1].communityInfluence = 0.25f;
		list[list.Count - 1].meatPoints = 1;
		list[list.Count - 1].shortcutColor = Color.red;
		list[list.Count - 1].shortcutSegments = 5;
		list[list.Count - 1].bodySize = 8.5f;
		list[list.Count - 1].dangerousToPlayer = 0.9f;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].jumpAction = "Swap Heads";
		list[list.Count - 1].pickupAction = "Grab/Shock";
		list[list.Count - 1].throwAction = "Release";
		list2.Clear();
		list3.Clear();
		list.Add(new CreatureTemplate(CreatureTemplate.Type.SmallCentipede, creatureTemplate15, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].roamBetweenRoomsChance = -1f;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.None;
		list[list.Count - 1].dangerousToPlayer = 0f;
		list[list.Count - 1].baseDamageResistance = 1f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].countsAsAKill = 0;
		list[list.Count - 1].abstractedLaziness = 1000;
		list[list.Count - 1].meatPoints = 0;
		list[list.Count - 1].bodySize = 0.2f;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].jumpAction = "Swap Heads";
		list[list.Count - 1].pickupAction = "Grab/Shock";
		list[list.Count - 1].throwAction = "Release";
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.Centiwing, creatureTemplate15, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].baseDamageResistance = 1f;
		list[list.Count - 1].canFly = true;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate9;
		list[list.Count - 1].visualRadius = 300f;
		list[list.Count - 1].waterVision = 0.4f;
		list[list.Count - 1].throughSurfaceVision = 0.85f;
		list[list.Count - 1].movementBasedVision = 0.25f;
		list[list.Count - 1].dangerousToPlayer = 0.4f;
		list[list.Count - 1].communityInfluence = 0.25f;
		list[list.Count - 1].meatPoints = 1;
		list[list.Count - 1].bodySize = 1.2f;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list[list.Count - 1].jumpAction = "Swap Heads";
		list[list.Count - 1].pickupAction = "Grab/Shock";
		list[list.Count - 1].throwAction = "Release";
		if (ModManager.MSC)
		{
			list2.Clear();
			list3.Clear();
			list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Unwanted));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Unwanted));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 10f, PathCost.Legality.Unwanted));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 100f, PathCost.Legality.Unwanted));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Ceiling, 100f, PathCost.Legality.Unwanted));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DoubleReachUp, 2f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 25f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 10f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToClimb, 5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 1.1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 1.1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.CeilingSlope, 2f, PathCost.Legality.Allowed));
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.AquaCenti, creatureTemplate15, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
			list[list.Count - 1].baseDamageResistance = 0.9f;
			list[list.Count - 1].baseStunResistance = 0.6f;
			list[list.Count - 1].quickDeath = false;
			list[list.Count - 1].offScreenSpeed = 0.3f;
			list[list.Count - 1].grasps = 2;
			list[list.Count - 1].abstractedLaziness = 150;
			list[list.Count - 1].AI = true;
			list[list.Count - 1].requireAImap = true;
			list[list.Count - 1].bodySize = 1f;
			list[list.Count - 1].stowFoodInDen = true;
			list[list.Count - 1].shortcutSegments = 4;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate13;
			list[list.Count - 1].doubleReachUpConnectionParams = creatureTemplate5.doubleReachUpConnectionParams;
			list[list.Count - 1].visualRadius = 1900f;
			list[list.Count - 1].waterVision = 2f;
			list[list.Count - 1].throughSurfaceVision = 0.2f;
			list[list.Count - 1].movementBasedVision = 0.95f;
			list[list.Count - 1].dangerousToPlayer = 0.6f;
			list[list.Count - 1].communityInfluence = 0.35f;
			list[list.Count - 1].meatPoints = 4;
			list[list.Count - 1].lungCapacity = 9900f;
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.WaterOnly;
			list[list.Count - 1].canSwim = true;
			list[list.Count - 1].damageRestistances[5, 0] = 102f;
			list[list.Count - 1].damageRestistances[5, 1] = 102f;
			list[list.Count - 1].BlizzardWanderer = true;
			list[list.Count - 1].BlizzardAdapted = true;
			list[list.Count - 1].jumpAction = "Swap Heads";
			list[list.Count - 1].pickupAction = "Grab/Shock";
			list[list.Count - 1].throwAction = "Release";
		}
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 2.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DoubleReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToClimb, 20f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 2.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 225f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1.2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 15f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.RegionTransportation, 400f, PathCost.Legality.Allowed));
		CreatureTemplate creatureTemplate16 = new CreatureTemplate(CreatureTemplate.Type.Scavenger, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0.1f));
		list.Add(creatureTemplate16);
		list[list.Count - 1].baseDamageResistance = 1.1f;
		list[list.Count - 1].baseStunResistance = 1.3f;
		list[list.Count - 1].instantDeathDamageLimit = 1.5f;
		list[list.Count - 1].offScreenSpeed = 0.75f;
		list[list.Count - 1].grasps = 4;
		list[list.Count - 1].abstractedLaziness = 50;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].bodySize = 1.2f;
		list[list.Count - 1].stowFoodInDen = false;
		list[list.Count - 1].shortcutSegments = 2;
		list[list.Count - 1].doPreBakedPathing = true;
		list[list.Count - 1].visualRadius = 1200f;
		list[list.Count - 1].movementBasedVision = 0.3f;
		list[list.Count - 1].canSwim = true;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list[list.Count - 1].hibernateOffScreen = true;
		list[list.Count - 1].roamBetweenRoomsChance = -1f;
		list[list.Count - 1].roamInRoomChance = -1f;
		list[list.Count - 1].socialMemory = true;
		list[list.Count - 1].communityID = CreatureCommunities.CommunityID.Scavengers;
		list[list.Count - 1].communityInfluence = 1f;
		list[list.Count - 1].dangerousToPlayer = 0.65f;
		list[list.Count - 1].meatPoints = 4;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].usesNPCTransportation = true;
		list[list.Count - 1].usesRegionTransportation = true;
		list[list.Count - 1].usesCreatureHoles = false;
		list[list.Count - 1].jumpAction = "Point";
		list[list.Count - 1].pickupAction = "Pick Up";
		list[list.Count - 1].throwAction = "Throw";
		if (ModManager.MSC)
		{
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.ScavengerElite, creatureTemplate16, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0.1f)));
			list[list.Count - 1].BlizzardWanderer = true;
			list[list.Count - 1].baseDamageResistance = 2.2f;
			list[list.Count - 1].baseStunResistance = 1.3f;
			list[list.Count - 1].instantDeathDamageLimit = 3.5f;
			list[list.Count - 1].offScreenSpeed = 0.75f;
			list[list.Count - 1].grasps = 4;
			list[list.Count - 1].AI = true;
			list[list.Count - 1].requireAImap = true;
			list[list.Count - 1].abstractedLaziness = 50;
			list[list.Count - 1].bodySize = 1.2f;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate16;
			list[list.Count - 1].stowFoodInDen = false;
			list[list.Count - 1].shortcutSegments = 2;
			list[list.Count - 1].visualRadius = 1200f;
			list[list.Count - 1].movementBasedVision = 0.3f;
			list[list.Count - 1].canSwim = true;
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
			list[list.Count - 1].hibernateOffScreen = true;
			list[list.Count - 1].roamBetweenRoomsChance = -1f;
			list[list.Count - 1].roamInRoomChance = -1f;
			list[list.Count - 1].socialMemory = true;
			list[list.Count - 1].communityID = CreatureCommunities.CommunityID.Scavengers;
			list[list.Count - 1].communityInfluence = 1f;
			list[list.Count - 1].dangerousToPlayer = 0.9f;
			list[list.Count - 1].meatPoints = 4;
			list[list.Count - 1].usesNPCTransportation = true;
			list[list.Count - 1].usesRegionTransportation = true;
			list[list.Count - 1].usesCreatureHoles = false;
			list[list.Count - 1].jumpAction = "Jump";
			list[list.Count - 1].pickupAction = "Pick Up";
			list[list.Count - 1].throwAction = "Throw";
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.ScavengerKing, list[list.Count - 1], list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0.1f)));
			list[list.Count - 1].BlizzardWanderer = true;
			list[list.Count - 1].baseDamageResistance = 4f;
			list[list.Count - 1].baseStunResistance = 1.3f;
			list[list.Count - 1].instantDeathDamageLimit = 4f;
			list[list.Count - 1].offScreenSpeed = 0.75f;
			list[list.Count - 1].grasps = 4;
			list[list.Count - 1].AI = true;
			list[list.Count - 1].requireAImap = true;
			list[list.Count - 1].abstractedLaziness = 50;
			list[list.Count - 1].bodySize = 1.2f;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate16;
			list[list.Count - 1].stowFoodInDen = false;
			list[list.Count - 1].shortcutSegments = 2;
			list[list.Count - 1].visualRadius = 1200f;
			list[list.Count - 1].movementBasedVision = 0.3f;
			list[list.Count - 1].canSwim = true;
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
			list[list.Count - 1].hibernateOffScreen = true;
			list[list.Count - 1].roamBetweenRoomsChance = 0f;
			list[list.Count - 1].roamInRoomChance = -1f;
			list[list.Count - 1].socialMemory = true;
			list[list.Count - 1].communityID = CreatureCommunities.CommunityID.Scavengers;
			list[list.Count - 1].communityInfluence = 1f;
			list[list.Count - 1].dangerousToPlayer = 1f;
			list[list.Count - 1].meatPoints = 4;
			list[list.Count - 1].usesNPCTransportation = true;
			list[list.Count - 1].usesRegionTransportation = false;
			list[list.Count - 1].usesCreatureHoles = false;
			list[list.Count - 1].doesNotUseDens = true;
			list[list.Count - 1].saveCreature = false;
			list[list.Count - 1].jumpAction = "Point";
			list[list.Count - 1].pickupAction = "Pick Up";
			list[list.Count - 1].throwAction = "Throw";
		}
		list2.Clear();
		list3.Clear();
		if (ModManager.MSC)
		{
			list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 2f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 1.5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 10f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 10f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 10f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToClimb, 50f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 120f, PathCost.Legality.Unwanted));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 150f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 15f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 4f, PathCost.Legality.Unwanted));
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.Yeek, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f)));
			list[list.Count - 1].baseDamageResistance = 0.5f;
			list[list.Count - 1].baseStunResistance = 0.2f;
			list[list.Count - 1].instantDeathDamageLimit = 1f;
			list[list.Count - 1].offScreenSpeed = 0.75f;
			list[list.Count - 1].grasps = 1;
			list[list.Count - 1].AI = true;
			list[list.Count - 1].requireAImap = true;
			list[list.Count - 1].abstractedLaziness = 50;
			list[list.Count - 1].bodySize = 1f;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate16;
			list[list.Count - 1].stowFoodInDen = true;
			list[list.Count - 1].shortcutSegments = 2;
			list[list.Count - 1].visualRadius = 2100f;
			list[list.Count - 1].movementBasedVision = 0.3f;
			list[list.Count - 1].canSwim = true;
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
			list[list.Count - 1].dangerousToPlayer = 0f;
			list[list.Count - 1].meatPoints = 2;
			list[list.Count - 1].wormgrassTilesIgnored = true;
			list[list.Count - 1].pickupAction = "Grab/Drop";
			list[list.Count - 1].jumpAction = "Jump";
			list[list.Count - 1].throwAction = "Run";
			list[list.Count - 1].usesNPCTransportation = true;
			list2.Clear();
			list3.Clear();
		}
		list.Add(new CreatureTemplate(CreatureTemplate.Type.Overseer, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].baseDamageResistance = 0.9f;
		list[list.Count - 1].baseStunResistance = 0.5f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].offScreenSpeed = 0f;
		list[list.Count - 1].bodySize = 0.3f;
		list[list.Count - 1].wormGrassImmune = true;
		list[list.Count - 1].saveCreature = false;
		list[list.Count - 1].countsAsAKill = 1;
		list[list.Count - 1].BlizzardWanderer = true;
		list[list.Count - 1].BlizzardAdapted = true;
		list2.Clear();
		list3.Clear();
		list.Add(new CreatureTemplate(CreatureTemplate.Type.VultureGrub, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].baseDamageResistance = 0.3f;
		list[list.Count - 1].baseStunResistance = 0.3f;
		list[list.Count - 1].instantDeathDamageLimit = 0.6f;
		list[list.Count - 1].AI = false;
		list[list.Count - 1].requireAImap = false;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].offScreenSpeed = 0f;
		list[list.Count - 1].bodySize = 0.2f;
		list[list.Count - 1].grasps = 0;
		list[list.Count - 1].visualRadius = 0f;
		list[list.Count - 1].communityInfluence = 0f;
		list[list.Count - 1].countsAsAKill = 0;
		for (int j = 0; j < list.Count; j++)
		{
			if (list[j].type == CreatureTemplate.Type.GreenLizard)
			{
				list[list.Count - 1].preBakedPathingAncestor = list[j];
				break;
			}
		}
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirOnly;
		list[list.Count - 1].jumpAction = "Signal";
		list.Add(new CreatureTemplate(CreatureTemplate.Type.Hazer, list[list.Count - 1], list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.Amphibious;
		list[list.Count - 1].jumpAction = "Camouflage";
		list[list.Count - 1].throwAction = "Spray Ink";
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 2.5f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 50f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 10f, PathCost.Legality.Unwanted));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToClimb, 10f, PathCost.Legality.Unwanted));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.EggBug, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.1f)));
		list[list.Count - 1].baseDamageResistance = 0.15f;
		list[list.Count - 1].baseStunResistance = 0.3f;
		list[list.Count - 1].instantDeathDamageLimit = 0.7f;
		list[list.Count - 1].offScreenSpeed = 0.3f;
		list[list.Count - 1].abstractedLaziness = 50;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].bodySize = 0.4f;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].shortcutSegments = 2;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate6;
		list[list.Count - 1].grasps = 0;
		list[list.Count - 1].visualRadius = 1200f;
		list[list.Count - 1].communityInfluence = 0.1f;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list[list.Count - 1].waterPathingResistance = 40f;
		list[list.Count - 1].canSwim = true;
		list[list.Count - 1].meatPoints = 1;
		list[list.Count - 1].jumpAction = "Flee";
		list[list.Count - 1].usesNPCTransportation = true;
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 1.5f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 3f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Ceiling, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 10f, PathCost.Legality.Unwanted));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToClimb, 10f, PathCost.Legality.Unwanted));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.CeilingSlope, 1.5f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.BigSpider, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].baseDamageResistance = 0.6f;
		list[list.Count - 1].baseStunResistance = 0.5f;
		list[list.Count - 1].instantDeathDamageLimit = 1f;
		list[list.Count - 1].offScreenSpeed = 0.3f;
		list[list.Count - 1].abstractedLaziness = 50;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].bodySize = 1.1f;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].shortcutSegments = 2;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate5;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].visualRadius = 500f;
		list[list.Count - 1].communityInfluence = 0.1f;
		list[list.Count - 1].dangerousToPlayer = 0.35f;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list[list.Count - 1].waterPathingResistance = 5f;
		list[list.Count - 1].canSwim = true;
		list[list.Count - 1].meatPoints = 3;
		list[list.Count - 1].interestInOtherAncestorsCatches = 0f;
		list[list.Count - 1].interestInOtherCreaturesCatches = 2f;
		list[list.Count - 1].jumpAction = "Pounce";
		list[list.Count - 1].pickupAction = "Grab";
		list[list.Count - 1].throwAction = "Release";
		list[list.Count - 1].usesNPCTransportation = true;
		list.Add(new CreatureTemplate(CreatureTemplate.Type.SpitterSpider, list[list.Count - 1], list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
		list[list.Count - 1].bodySize = 1.2f;
		list[list.Count - 1].baseDamageResistance = 1.1f;
		list[list.Count - 1].baseStunResistance = 0.6f;
		list[list.Count - 1].visualRadius = 1100f;
		list[list.Count - 1].dangerousToPlayer = 0.5f;
		list[list.Count - 1].meatPoints = 4;
		list[list.Count - 1].jumpAction = "Spit";
		list[list.Count - 1].pickupAction = "Grab";
		list[list.Count - 1].throwAction = "Release";
		list2.Clear();
		list3.Clear();
		if (ModManager.MSC)
		{
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.MotherSpider, list[list.Count - 2], list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f)));
			list[list.Count - 1].bodySize = 2f;
			list[list.Count - 1].baseDamageResistance = 1.1f;
			list[list.Count - 1].baseStunResistance = 0.6f;
			list[list.Count - 1].visualRadius = 300f;
			list[list.Count - 1].dangerousToPlayer = 0.6f;
			list[list.Count - 1].meatPoints = 6;
			list[list.Count - 1].jumpAction = "Pounce";
			list[list.Count - 1].pickupAction = "Grab";
			list[list.Count - 1].throwAction = "Birth";
			list2.Clear();
			list3.Clear();
		}
		list2.Add(new TileTypeResistance(AItile.Accessibility.Air, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 1f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.BigNeedleWorm, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 1f)));
		list[list.Count - 1].baseDamageResistance = 0.4f;
		list[list.Count - 1].baseStunResistance = 1f;
		list[list.Count - 1].instantDeathDamageLimit = 1.2f;
		list[list.Count - 1].abstractedLaziness = 10;
		list[list.Count - 1].roamBetweenRoomsChance = 0.07f;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].canFly = true;
		list[list.Count - 1].doPreBakedPathing = false;
		list[list.Count - 1].offScreenSpeed = 1.5f;
		list[list.Count - 1].bodySize = 0.7f;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate9;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].visualRadius = 900f;
		list[list.Count - 1].movementBasedVision = 0.3f;
		list[list.Count - 1].communityInfluence = 0.5f;
		list[list.Count - 1].socialMemory = true;
		list[list.Count - 1].shortcutSegments = 3;
		list[list.Count - 1].shortcutColor = new Color(1f, 0.5f, 0.5f);
		list[list.Count - 1].dangerousToPlayer = 0.5f;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirOnly;
		list[list.Count - 1].meatPoints = 3;
		list[list.Count - 1].jumpAction = "Noot";
		list[list.Count - 1].pickupAction = "Skewer";
		list[list.Count - 1].usesNPCTransportation = true;
		list.Add(new CreatureTemplate(CreatureTemplate.Type.SmallNeedleWorm, list[list.Count - 1], list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 1f)));
		list[list.Count - 1].smallCreature = true;
		list[list.Count - 1].bodySize = 0.15f;
		list[list.Count - 1].baseDamageResistance = 0.2f;
		list[list.Count - 1].baseStunResistance = 0.4f;
		list[list.Count - 1].socialMemory = false;
		list[list.Count - 1].roamBetweenRoomsChance = 0.05f;
		list[list.Count - 1].offScreenSpeed = 3.2f;
		list[list.Count - 1].shortcutSegments = 1;
		list[list.Count - 1].dangerousToPlayer = 0f;
		list[list.Count - 1].meatPoints = 0;
		list[list.Count - 1].jumpAction = "Noot";
		list[list.Count - 1].pickupAction = "Hang On Mom";
		list[list.Count - 1].throwAction = "Detach";
		list[list.Count - 1].usesNPCTransportation = true;
		list2.Clear();
		list3.Clear();
		list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 1.5f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 3f, PathCost.Legality.Allowed));
		list2.Add(new TileTypeResistance(AItile.Accessibility.Ceiling, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 10f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 3f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
		list3.Add(new TileConnectionResistance(MovementConnection.MovementType.CeilingSlope, 1.5f, PathCost.Legality.Allowed));
		list.Add(new CreatureTemplate(CreatureTemplate.Type.DropBug, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
		list[list.Count - 1].abstractedLaziness = 200;
		list[list.Count - 1].roamBetweenRoomsChance = 0.025f;
		list[list.Count - 1].baseDamageResistance = 0.95f;
		list[list.Count - 1].baseStunResistance = 0.6f;
		list[list.Count - 1].offScreenSpeed = 0.1f;
		list[list.Count - 1].AI = true;
		list[list.Count - 1].requireAImap = true;
		list[list.Count - 1].bodySize = 1.2f;
		list[list.Count - 1].stowFoodInDen = true;
		list[list.Count - 1].shortcutSegments = 2;
		list[list.Count - 1].preBakedPathingAncestor = creatureTemplate5;
		list[list.Count - 1].grasps = 1;
		list[list.Count - 1].visualRadius = 800f;
		list[list.Count - 1].movementBasedVision = 0.65f;
		list[list.Count - 1].communityInfluence = 0.1f;
		list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
		list[list.Count - 1].waterPathingResistance = 2f;
		list[list.Count - 1].canSwim = true;
		list[list.Count - 1].meatPoints = 3;
		list[list.Count - 1].dangerousToPlayer = 0.4f;
		list[list.Count - 1].jumpAction = "Pounce";
		list[list.Count - 1].pickupAction = "Hang/Grab";
		list[list.Count - 1].throwAction = "Release";
		list[list.Count - 1].usesNPCTransportation = true;
		list2.Clear();
		list3.Clear();
		if (ModManager.MSC)
		{
			list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Unallowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Unallowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 10f, PathCost.Legality.Unallowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 100f, PathCost.Legality.Unallowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Ceiling, 100f, PathCost.Legality.Unallowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Unallowed));
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.BigJelly, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
			list[list.Count - 1].baseDamageResistance = 2f;
			list[list.Count - 1].baseStunResistance = 0.6f;
			list[list.Count - 1].quickDeath = false;
			list[list.Count - 1].offScreenSpeed = 0.3f;
			list[list.Count - 1].grasps = 0;
			list[list.Count - 1].abstractedLaziness = 150000;
			list[list.Count - 1].AI = true;
			list[list.Count - 1].requireAImap = true;
			list[list.Count - 1].bodySize = 1f;
			list[list.Count - 1].stowFoodInDen = true;
			list[list.Count - 1].shortcutSegments = 3;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate13;
			list[list.Count - 1].doubleReachUpConnectionParams = creatureTemplate5.doubleReachUpConnectionParams;
			list[list.Count - 1].visualRadius = 1900f;
			list[list.Count - 1].waterVision = 20f;
			list[list.Count - 1].throughSurfaceVision = 0.1f;
			list[list.Count - 1].movementBasedVision = 0.25f;
			list[list.Count - 1].dangerousToPlayer = 0.7f;
			list[list.Count - 1].communityInfluence = 0.35f;
			list[list.Count - 1].meatPoints = 3;
			list[list.Count - 1].lungCapacity = 9900f;
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.WaterOnly;
			list[list.Count - 1].canSwim = true;
			list[list.Count - 1].damageRestistances[5, 0] = 102f;
			list[list.Count - 1].damageRestistances[5, 1] = 102f;
			list[list.Count - 1].wormGrassImmune = true;
			list[list.Count - 1].abstractImmobile = true;
			list[list.Count - 1].forbidStandardShortcutEntry = true;
			list[list.Count - 1].BlizzardWanderer = true;
			list[list.Count - 1].BlizzardAdapted = true;
			list[list.Count - 1].jumpAction = "Ascend";
			list[list.Count - 1].throwAction = "Descend";
			list[list.Count - 1].pickupAction = "Moo!";
			list2.Clear();
			list3.Clear();
		}
		if (ModManager.MSC)
		{
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f)));
			list[list.Count - 1].baseDamageResistance = 0.8f;
			list[list.Count - 1].baseStunResistance = 2f;
			list[list.Count - 1].abstractedLaziness = 160;
			list[list.Count - 1].AI = true;
			list[list.Count - 1].requireAImap = true;
			list[list.Count - 1].canFly = false;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].offScreenSpeed = 0.5f;
			list[list.Count - 1].bodySize = 0.6f;
			list[list.Count - 1].grasps = 3;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate9;
			list[list.Count - 1].stowFoodInDen = false;
			list[list.Count - 1].visualRadius = 0f;
			list[list.Count - 1].movementBasedVision = 0.6f;
			list[list.Count - 1].forbidStandardShortcutEntry = true;
			list[list.Count - 1].communityID = CreatureCommunities.CommunityID.None;
			list[list.Count - 1].communityInfluence = 0f;
			list[list.Count - 1].socialMemory = false;
			list[list.Count - 1].lungCapacity = 200f;
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirOnly;
			list[list.Count - 1].meatPoints = 0;
			list[list.Count - 1].saveCreature = false;
			list[list.Count - 1].doesNotUseDens = true;
			list[list.Count - 1].abstractImmobile = true;
			list2.Clear();
			list3.Clear();
		}
		if (ModManager.MSC)
		{
			list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 2.5f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Wall, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Ceiling, 1.2f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 10f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 10f, PathCost.Legality.Unwanted));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToClimb, 10f, PathCost.Legality.Unwanted));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 1.5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 3f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OffScreenMovement, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.CeilingSlope, 2f, PathCost.Legality.Allowed));
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.FireBug, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f)));
			list[list.Count - 1].baseDamageResistance = 1.4f;
			list[list.Count - 1].baseStunResistance = 1.3f;
			list[list.Count - 1].instantDeathDamageLimit = 4f;
			list[list.Count - 1].offScreenSpeed = 0.3f;
			list[list.Count - 1].abstractedLaziness = 50;
			list[list.Count - 1].AI = true;
			list[list.Count - 1].requireAImap = true;
			list[list.Count - 1].bodySize = 0.4f;
			list[list.Count - 1].stowFoodInDen = true;
			list[list.Count - 1].shortcutSegments = 2;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate6;
			list[list.Count - 1].grasps = 1;
			list[list.Count - 1].visualRadius = 1200f;
			list[list.Count - 1].communityInfluence = 0.1f;
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirOnly;
			list[list.Count - 1].waterPathingResistance = 40f;
			list[list.Count - 1].canSwim = true;
			list[list.Count - 1].usesNPCTransportation = true;
			list[list.Count - 1].meatPoints = 2;
			list2.Clear();
			list3.Clear();
		}
		if (ModManager.MSC)
		{
			list2.Add(new TileTypeResistance(AItile.Accessibility.OffScreen, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Floor, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Corridor, 1f, PathCost.Legality.Allowed));
			list2.Add(new TileTypeResistance(AItile.Accessibility.Climb, 2.5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Standard, 1f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.OpenDiagonal, 3f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachOverGap, 3f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachUp, 2f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ReachDown, 2f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.SemiDiagonalReach, 2f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToFloor, 10f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToClimb, 20f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.DropToWater, 10f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.ShortCut, 2.5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.BetweenRooms, 4f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.Slope, 1.5f, PathCost.Legality.Allowed));
			list3.Add(new TileConnectionResistance(MovementConnection.MovementType.NPCTransportation, 20f, PathCost.Legality.Allowed));
			list.Add(new CreatureTemplate(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, null, list2, list3, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0.5f)));
			list[list.Count - 1].baseDamageResistance = 1f;
			list[list.Count - 1].baseStunResistance = 1f;
			list[list.Count - 1].instantDeathDamageLimit = 1f;
			list[list.Count - 1].grasps = 2;
			list[list.Count - 1].offScreenSpeed = 0.5f;
			list[list.Count - 1].bodySize = 1f;
			list[list.Count - 1].shortcutSegments = 2;
			list[list.Count - 1].doPreBakedPathing = false;
			list[list.Count - 1].preBakedPathingAncestor = creatureTemplate16;
			list[list.Count - 1].waterRelationship = CreatureTemplate.WaterRelationship.AirAndSurface;
			list[list.Count - 1].waterPathingResistance = 2f;
			list[list.Count - 1].canSwim = true;
			list[list.Count - 1].AI = true;
			list[list.Count - 1].requireAImap = true;
			list[list.Count - 1].saveCreature = true;
			list[list.Count - 1].socialMemory = true;
			list[list.Count - 1].interestInOtherAncestorsCatches = 0f;
			list[list.Count - 1].interestInOtherCreaturesCatches = 0f;
			list[list.Count - 1].name = "Slugpup";
			list[list.Count - 1].meatPoints = 3;
			list[list.Count - 1].jumpAction = "Jump";
			list[list.Count - 1].pickupAction = "Pick up / Eat";
			list[list.Count - 1].throwAction = "Throw";
			list[list.Count - 1].visualRadius = 800f;
			list[list.Count - 1].saveCreature = false;
			list[list.Count - 1].usesNPCTransportation = true;
			list2.Clear();
			list3.Clear();
		}
		creatureTemplates = new CreatureTemplate[Math.Max(list.Count, ExtEnum<CreatureTemplate.Type>.values.Count)];
		foreach (CreatureTemplate item in list)
		{
			if (item.type.Index != -1)
			{
				creatureTemplates[item.type.Index] = item;
			}
		}
		InitCustomTemplates();
		int num = 0;
		int num2 = 0;
		for (int k = 0; k < creatureTemplates.Length; k++)
		{
			if (creatureTemplates[k].doPreBakedPathing)
			{
				num++;
			}
			if (creatureTemplates[k].quantified)
			{
				num2++;
			}
		}
		preBakedPathingCreatures = new CreatureTemplate[num];
		quantifiedCreatures = new CreatureTemplate[num2];
		num = 0;
		num2 = 0;
		for (int l = 0; l < creatureTemplates.Length; l++)
		{
			creatureTemplates[l].index = l;
			if (creatureTemplates[l].doPreBakedPathing)
			{
				preBakedPathingCreatures[num] = creatureTemplates[l];
				preBakedPathingCreatures[num].PreBakedPathingIndex = num;
				num++;
			}
			if (creatureTemplates[l].quantified)
			{
				quantifiedCreatures[num2] = creatureTemplates[l];
				quantifiedCreatures[num2].quantifiedIndex = num2;
				num2++;
			}
		}
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.SocialDependent, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.9f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.TubeWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.025f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.Scavenger, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.05f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.LanternMouse, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.35f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.EggBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.45f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.JetFish, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.25f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.9f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.LizardTemplate, CreatureTemplate.Type.Hazer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.PinkLizard, CreatureTemplate.Type.PinkLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.PinkLizard, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.PinkLizard, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.PinkLizard, CreatureTemplate.Type.WhiteLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.25f));
		EstablishRelationship(CreatureTemplate.Type.GreenLizard, CreatureTemplate.Type.PinkLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.GreenLizard, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.GreenLizard, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.GreenLizard, CreatureTemplate.Type.WhiteLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.05f));
		EstablishRelationship(CreatureTemplate.Type.GreenLizard, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.25f));
		EstablishRelationship(CreatureTemplate.Type.GreenLizard, CreatureTemplate.Type.EggBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.GreenLizard, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.GreenLizard, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.BlueLizard, CreatureTemplate.Type.PinkLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.BlueLizard, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.BlueLizard, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.45f));
		EstablishRelationship(CreatureTemplate.Type.BlueLizard, CreatureTemplate.Type.WhiteLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.25f));
		EstablishRelationship(CreatureTemplate.Type.BlueLizard, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.25f));
		EstablishRelationship(CreatureTemplate.Type.BlueLizard, CreatureTemplate.Type.WhiteLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.BlueLizard, CreatureTemplate.Type.CyanLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.BlueLizard, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.WhiteLizard, CreatureTemplate.Type.PinkLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.WhiteLizard, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.05f));
		EstablishRelationship(CreatureTemplate.Type.WhiteLizard, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.35f));
		EstablishRelationship(CreatureTemplate.Type.WhiteLizard, CreatureTemplate.Type.WhiteLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.25f));
		EstablishRelationship(CreatureTemplate.Type.WhiteLizard, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.WhiteLizard, CreatureTemplate.Type.EggBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.RedLizard, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.RedLizard, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.RedLizard, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.RedLizard, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.RedLizard, CreatureTemplate.Type.RedLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 1f));
		EstablishRelationship(CreatureTemplate.Type.CyanLizard, CreatureTemplate.Type.CyanLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.075f));
		EstablishRelationship(CreatureTemplate.Type.CyanLizard, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
		for (int m = 0; m < creatureTemplate8.relationships.Length; m++)
		{
			if (creatureTemplate8.relationships[m].type == CreatureTemplate.Relationship.Type.Eats)
			{
				creatureTemplate8.relationships[m].intensity *= 0.3f;
			}
		}
		EstablishRelationship(CreatureTemplate.Type.BlackLizard, CreatureTemplate.Type.BlackLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.05f));
		EstablishRelationship(CreatureTemplate.Type.YellowLizard, CreatureTemplate.Type.YellowLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Pack, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.Salamander, CreatureTemplate.Type.JetFish, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Fly, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.05f));
		EstablishRelationship(CreatureTemplate.Type.Fly, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.Fly, CreatureTemplate.Type.JetFish, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.Fly, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.LanternMouse, CreatureTemplate.Type.LanternMouse, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.PlaysWith, 0.01f));
		EstablishRelationship(CreatureTemplate.Type.LanternMouse, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.LanternMouse, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.LanternMouse, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.LanternMouse, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.LanternMouse, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.LanternMouse, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.LanternMouse, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.LanternMouse, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Snail, CreatureTemplate.Type.Snail, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Snail, CreatureTemplate.Type.BrotherLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.Scavenger, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.VultureGrub, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.01f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.JetFish, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.EggBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.05f));
		EstablishRelationship(CreatureTemplate.Type.Vulture, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.KingVulture, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.55f));
		EstablishRelationship(CreatureTemplate.Type.KingVulture, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.55f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.PlaysWith, 1f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.CicadaB, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.PlaysWith, 1f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.SocialDependent, 1f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.JetFish, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.Centiwing, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.35f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.WhiteLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.CicadaA, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.CicadaB, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.CicadaB, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.SocialDependent, 1f));
		EstablishRelationship(CreatureTemplate.Type.CicadaB, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.PoleMimic, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.Snail, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.GarbageWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.Salamander, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.JetFish, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.EggBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.Hazer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.Leech, CreatureTemplate.Type.BrotherLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.Spider, CreatureTemplate.Type.Spider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Spider, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.SocialDependent, 1f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.Salamander, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.JetFish, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.BigEel, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.CicadaB, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.BrotherLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.TubeWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.GarbageWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.PoleMimic, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.BrotherLongLegs, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.BrotherLongLegs, CreatureTemplate.Type.TempleGuard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, CreatureTemplate.Type.TempleGuard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.Centiwing, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.SpitterSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.65f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Slugcat, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.TentaclePlant, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.TentaclePlant, CreatureTemplate.Type.PoleMimic, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.TentaclePlant, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.TentaclePlant, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.TentaclePlant, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.TentaclePlant, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.TentaclePlant, CreatureTemplate.Type.Deer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.Spider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.MirosBird, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.TempleGuard, CreatureTemplate.Type.TempleGuard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Pack, 0f));
		EstablishRelationship(CreatureTemplate.Type.GarbageWorm, CreatureTemplate.Type.BrotherLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.SmallCentipede, CreatureTemplate.Type.GarbageWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Centipede, CreatureTemplate.Type.GarbageWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.RedCentipede, CreatureTemplate.Type.GarbageWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.75f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.95f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.SocialDependent, 1f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.Scavenger, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Pack, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.LanternMouse, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.Snail, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.GarbageWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.BrotherLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.95f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.65f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.PoleMimic, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.45f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Uncomfortable, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.55f));
		EstablishRelationship(CreatureTemplate.Type.Centipede, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Centipede, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.Centipede, CreatureTemplate.Type.PoleMimic, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.Centipede, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.25f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.RedLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.LanternMouse, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.11f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.2f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.VultureGrub, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.Scavenger, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.45f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.PoleMimic, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.Centiwing, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.CicadaB, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.25f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.9f));
		EstablishRelationship(CreatureTemplate.Type.BigSpider, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.RedLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.4f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.PoleMimic, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0.25f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.9f));
		EstablishRelationship(CreatureTemplate.Type.DropBug, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.9f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.9f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.9f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.9f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.6f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.VultureGrub, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
		for (int n = 0; n < creatureTemplates.Length; n++)
		{
			EstablishRelationship(CreatureTemplate.Type.EggBug, new CreatureTemplate.Type(ExtEnum<CreatureTemplate.Type>.values.GetEntry(n)), new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, Mathf.InverseLerp(0f, 8f, creatureTemplates[n].bodySize)));
		}
		EstablishRelationship(CreatureTemplate.Type.EggBug, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		for (int num3 = 0; num3 < creatureTemplates.Length; num3++)
		{
			EstablishRelationship(new CreatureTemplate.Type(ExtEnum<CreatureTemplate.Type>.values.GetEntry(num3)), CreatureTemplate.Type.Overseer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
		}
		EstablishRelationship(CreatureTemplate.Type.Scavenger, CreatureTemplate.Type.Overseer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 1f));
		if (ModManager.MSC)
		{
			EstablishRelationship(CreatureTemplate.Type.Slugcat, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(CreatureTemplate.Type.LanternMouse, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.LanternMouse, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(CreatureTemplate.Type.LizardTemplate, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.Scavenger, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.8f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, MoreSlugcatsEnums.CreatureTemplateType.ScavengerElite, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.8f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, MoreSlugcatsEnums.CreatureTemplateType.ScavengerKing, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.8f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.VultureGrub, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.01f));
			EstablishRelationship(CreatureTemplate.Type.Scavenger, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ScavengerElite, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ScavengerKing, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
			EstablishRelationship(CreatureTemplate.Type.CicadaA, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.JetFish, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(CreatureTemplate.Type.JetFish, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.EggBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.15f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.05f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
			EstablishRelationship(CreatureTemplate.Type.BigSpider, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(CreatureTemplate.Type.DropBug, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(CreatureTemplate.Type.BigNeedleWorm, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0.1f));
			EstablishRelationship(CreatureTemplate.Type.MirosBird, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.3f));
			EstablishRelationship(CreatureTemplate.Type.KingVulture, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(CreatureTemplate.Type.Vulture, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0f));
			EstablishRelationship(CreatureTemplate.Type.SmallCentipede, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.Spider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.7f));
			EstablishRelationship(CreatureTemplate.Type.Centipede, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.7f));
			EstablishRelationship(CreatureTemplate.Type.RedCentipede, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.7f));
			EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, MoreSlugcatsEnums.CreatureTemplateType.Inspector, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.TerrorLongLegs, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(CreatureTemplate.Type.Scavenger, MoreSlugcatsEnums.CreatureTemplateType.HunterDaddy, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
			EstablishRelationship(CreatureTemplate.Type.Scavenger, MoreSlugcatsEnums.CreatureTemplateType.Inspector, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.TerrorLongLegs, CreatureTemplate.Type.TempleGuard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.Leech, MoreSlugcatsEnums.CreatureTemplateType.Inspector, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.Leech, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.Leech, MoreSlugcatsEnums.CreatureTemplateType.TerrorLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(CreatureTemplate.Type.Leech, MoreSlugcatsEnums.CreatureTemplateType.HunterDaddy, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(CreatureTemplate.Type.Leech, MoreSlugcatsEnums.CreatureTemplateType.EelLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
			EstablishRelationship(CreatureTemplate.Type.BlueLizard, MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(CreatureTemplate.Type.BlueLizard, MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.25f));
			EstablishRelationship(CreatureTemplate.Type.BlueLizard, MoreSlugcatsEnums.CreatureTemplateType.EelLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.25f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.CicadaB, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.GarbageWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.Leech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.SeaLeech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, MoreSlugcatsEnums.CreatureTemplateType.JungleLeech, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.BigNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.Deer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.Centiwing, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.Overseer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.EggBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.Spider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.PoleMimic, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.Hazer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.VultureGrub, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.TempleGuard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.TubeWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.BrotherLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, MoreSlugcatsEnums.CreatureTemplateType.TerrorLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, MoreSlugcatsEnums.CreatureTemplateType.Inspector, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, MoreSlugcatsEnums.CreatureTemplateType.AquaCenti, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, MoreSlugcatsEnums.CreatureTemplateType.BigJelly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, CreatureTemplate.Type.Slugcat, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, MoreSlugcatsEnums.CreatureTemplateType.FireBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.5f));
			EstablishRelationship(CreatureTemplate.Type.EggBug, MoreSlugcatsEnums.CreatureTemplateType.FireBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.5f));
			EstablishRelationship(CreatureTemplate.Type.Scavenger, MoreSlugcatsEnums.CreatureTemplateType.FireBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ScavengerElite, MoreSlugcatsEnums.CreatureTemplateType.FireBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ScavengerKing, MoreSlugcatsEnums.CreatureTemplateType.FireBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 1f));
			EstablishRelationship(CreatureTemplate.Type.MirosBird, MoreSlugcatsEnums.CreatureTemplateType.FireBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, MoreSlugcatsEnums.CreatureTemplateType.FireBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.Deer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.Hazer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.Snail, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.CicadaB, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.LanternMouse, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.LanternMouse, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.Scavenger, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ScavengerElite, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ScavengerKing, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.1f));
			EstablishRelationship(CreatureTemplate.Type.LizardTemplate, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(CreatureTemplate.Type.DropBug, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(CreatureTemplate.Type.Vulture, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.Deer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.Hazer, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.Snail, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.CicadaA, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.CicadaB, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.Yeek, CreatureTemplate.Type.LanternMouse, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.LanternMouse, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.Scavenger, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ScavengerElite, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ScavengerKing, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Attacks, 0.1f));
			EstablishRelationship(CreatureTemplate.Type.LizardTemplate, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(CreatureTemplate.Type.DropBug, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(CreatureTemplate.Type.Vulture, MoreSlugcatsEnums.CreatureTemplateType.Yeek, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.AquaCenti, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			for (int num4 = 0; num4 < creatureTemplates.Length; num4++)
			{
				EstablishRelationship(new CreatureTemplate.Type(ExtEnum<CreatureTemplate.Type>.values.GetEntry(num4)), MoreSlugcatsEnums.CreatureTemplateType.BigJelly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.2f));
			}
			EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, MoreSlugcatsEnums.CreatureTemplateType.BigJelly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.BrotherLongLegs, MoreSlugcatsEnums.CreatureTemplateType.BigJelly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.TerrorLongLegs, MoreSlugcatsEnums.CreatureTemplateType.BigJelly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.HunterDaddy, MoreSlugcatsEnums.CreatureTemplateType.BigJelly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.BigEel, MoreSlugcatsEnums.CreatureTemplateType.BigJelly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.EggBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.BigEel, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.TentaclePlant, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.MirosBird, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.Centipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.Centiwing, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.4f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.LizardTemplate, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.6f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.SmallCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.6f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.SmallNeedleWorm, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.SpitterSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.8f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.DropBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Pack, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, CreatureTemplate.Type.VultureGrub, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
			EstablishRelationship(CreatureTemplate.Type.LizardTemplate, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(CreatureTemplate.Type.Fly, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
			EstablishRelationship(CreatureTemplate.Type.LanternMouse, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.3f));
			EstablishRelationship(CreatureTemplate.Type.Vulture, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
			EstablishRelationship(CreatureTemplate.Type.CicadaA, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.SocialDependent, 1f));
			EstablishRelationship(CreatureTemplate.Type.CicadaB, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.SocialDependent, 1f));
			EstablishRelationship(CreatureTemplate.Type.JetFish, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.SocialDependent, 1f));
			EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(CreatureTemplate.Type.MirosBird, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.6f));
			EstablishRelationship(CreatureTemplate.Type.Scavenger, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.SocialDependent, 1f));
			EstablishRelationship(CreatureTemplate.Type.BigSpider, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.4f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.MirosVulture, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.FireBug, MoreSlugcatsEnums.CreatureTemplateType.SlugNPC, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			for (int num5 = 0; num5 < creatureTemplates.Length; num5++)
			{
				EstablishRelationship(new CreatureTemplate.Type(ExtEnum<CreatureTemplate.Type>.values.GetEntry(num5)), MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.9f));
			}
			EstablishRelationship(CreatureTemplate.Type.DaddyLongLegs, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.BrotherLongLegs, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.TerrorLongLegs, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.HunterDaddy, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.Deer, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.Vulture, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.KingVulture, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.TentaclePlant, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.PoleMimic, MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, CreatureTemplate.Type.Vulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, CreatureTemplate.Type.DaddyLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, CreatureTemplate.Type.BrotherLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, MoreSlugcatsEnums.CreatureTemplateType.HunterDaddy, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.StowawayBug, MoreSlugcatsEnums.CreatureTemplateType.TerrorLongLegs, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, MoreSlugcatsEnums.CreatureTemplateType.EelLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.25f));
			EstablishRelationship(CreatureTemplate.Type.RedLizard, MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
			EstablishRelationship(CreatureTemplate.Type.GreenLizard, MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
			EstablishRelationship(CreatureTemplate.Type.PinkLizard, MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
			EstablishRelationship(CreatureTemplate.Type.YellowLizard, MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, CreatureTemplate.Type.PinkLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.35f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.65f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, CreatureTemplate.Type.RedLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, CreatureTemplate.Type.Fly, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, MoreSlugcatsEnums.CreatureTemplateType.ZoopLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.3f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, CreatureTemplate.Type.PinkLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.2f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, CreatureTemplate.Type.GreenLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.8f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, CreatureTemplate.Type.WhiteLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.05f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, CreatureTemplate.Type.BlueLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.25f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, CreatureTemplate.Type.EggBug, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.1f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, CreatureTemplate.Type.KingVulture, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, CreatureTemplate.Type.RedCentipede, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.5f));
			EstablishRelationship(CreatureTemplate.Type.CicadaA, MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Antagonizes, 0.1f));
			EstablishRelationship(CreatureTemplate.Type.Vulture, MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Ignores, 0f));
			EstablishRelationship(CreatureTemplate.Type.PinkLizard, MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.15f));
			EstablishRelationship(CreatureTemplate.Type.BlueLizard, MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.25f));
			EstablishRelationship(CreatureTemplate.Type.WhiteLizard, MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.AgressiveRival, 0.05f));
			EstablishRelationship(CreatureTemplate.Type.KingVulture, MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.55f));
			EstablishRelationship(CreatureTemplate.Type.BigSpider, MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Afraid, 0.4f));
			EstablishRelationship(MoreSlugcatsEnums.CreatureTemplateType.SpitLizard, CreatureTemplate.Type.BigSpider, new CreatureTemplate.Relationship(CreatureTemplate.Relationship.Type.Eats, 0.6f));
		}
	}

	public static CreatureTemplate GetCreatureTemplate(string nm)
	{
		for (int i = 0; i < creatureTemplates.Length; i++)
		{
			if (creatureTemplates[i].name == nm)
			{
				return creatureTemplates[i];
			}
		}
		return null;
	}

	public static CreatureTemplate GetCreatureTemplate(CreatureTemplate.Type type)
	{
		if (type == null || type.Index == -1)
		{
			return null;
		}
		return creatureTemplates[type.Index];
	}

	private static void EstablishRelationship(CreatureTemplate.Type a, CreatureTemplate.Type b, CreatureTemplate.Relationship relationship)
	{
		CreatureTemplate creatureTemplate = GetCreatureTemplate(a);
		CreatureTemplate creatureTemplate2 = GetCreatureTemplate(b);
		if (creatureTemplate == null || creatureTemplate2 == null || creatureTemplate2.type.Index == -1)
		{
			return;
		}
		creatureTemplate.relationships[creatureTemplate2.type.Index] = relationship;
		CreatureTemplate[] array = creatureTemplates;
		foreach (CreatureTemplate creatureTemplate3 in array)
		{
			if (creatureTemplate3 != null)
			{
				if (creatureTemplate3.ancestor == creatureTemplate)
				{
					EstablishRelationship(creatureTemplate3.type, creatureTemplate2.type, relationship);
				}
				if (creatureTemplate3.ancestor == creatureTemplate2)
				{
					EstablishRelationship(creatureTemplate.type, creatureTemplate3.type, relationship);
				}
			}
		}
	}
}
